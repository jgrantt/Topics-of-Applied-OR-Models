model SoftBall
  uses "mmxprs"
  uses "mmsystem"
  uses "mmnl"

  ! =========== Model Configuration ===========

  cutoff := 200 ! Seconds untill termination.

  ! Initialisations from ....
  input_path := "new_input.dat"

  extension_path := "extensions_base2022.dat"

  running_extensions := true

  ! =========== END Model Configuration  ===========

  declarations

    teams = 1..12
    team_names: SET of string

    weeks_in_season = 11
    weekends = 1..weeks_in_season
    num_years = 4
    Years = 1..num_years

    num_weeks = num_years*weeks_in_season+(num_years-1)
    
    num_weeks = 47
    szn_1 = 1..11
    szn_2 = 12..23
    szn_3 = 24..35
    szn_4 = 36..47


    ! 1-yes, 0 - no
    east_division: SET of string
    west_division: SET of string
    cold_weather: SET of string
    warm_weather: SET of string
    F_ASC: SET of string
    F_CSC: SET of string
    F_CSM: SET of string
    F_CSUP: SET of string
    F_FLC: SET of string
    F_MSC: SET of string
    F_MSCD: SET of string
    F_NMHU: SET of string
    F_RU: SET of string
    F_UCCS: SET of string
    F_CCU: SET of string
    F_BHSU: SET of string

    !--- decision variables ----

    !Hosting non-pod weekends
    ! team i @ team j on a non-pod weekend k
    X: array(team_names, team_names, weekends, Years) of mpvar


    ! ---- Penalty Variables -----
    ! team i has 2 home games in a row starting in week k
    a: array(team_names, weekends,Years) of mpvar

    q: array(team_names, team_names, Years) of mpvar

  end-declarations



  initialisations from input_path
    team_names east_division west_division cold_weather warm_weather
    F_ASC F_CSC F_CSM F_CSUP F_FLC F_MSC F_MSCD F_NMHU F_RU F_UCCS F_CCU F_BHSU
  end-initialisations


  !---- Binary Constraints -------------

  ! team i @ team j on a non-pod weekend k
  forall(i in team_names) do
      forall(j in team_names) do
        forall(k in weekends ) do
          forall(t in Years) do
            X(i,j,k,t) is_binary
          end-do
        end-do
      end-do
  end-do


  ! team i hosts two games in a row, starting from non-pod weekend k
  forall(i in team_names, k in weekends, t in Years) do
    a(i,k,t) is_binary
  end-do

  ! ----- The Constraints ----------------


  ! (1)  Each weekend, a team plays exactly one other team, either home or away
  forall(t in Years) do
    forall(k in weekends) do
      forall(i in team_names) do
        sum(j in team_names | i<>j) X(i,j,k,t) + sum(j in team_names | i<>j) X(j,i,k,t) = 1
      end-do
    end-do
  end-do


  ! (2) Each team plays every other team once during the season, either at home or away
  forall(t in Years) do
    forall(i in team_names) do
      forall(j in team_names | i<>j) do
        sum(k in weekends) (X(i,j,k,t) + X(j,i,k,t)) = 1
      end-do
    end-do
  end-do


!   ! (6) A team either starts or finishes the season at home

  forall(t in Years) do
    forall (j in team_names) do
      sum(i in team_names | i<>j) (X(i,j,1,t) + X(i,j,11,t)) =1
    end-do
  end-do


! ! ------ END 6

  ! (9) leq 6 home series for a team
  forall(t in Years) do
    forall(i in team_names) do
      sum(j in team_names, k in weekends | i<>j) X(j,i,k,t)  <= 6
    end-do
  end-do


!   ! (16)  For the first four weekends, force cold weather schools to play away at least twice
  forall (t in Years) do
    forall (i in cold_weather) do
      sum(j in warm_weather)( X(i,j,1,t) + X(i,j,2,t) + X(i,j,3,t) + X(i,j,4,t)) >= 2
    end-do
  end-do




!   ! (17) Warm weather schools must play at home or at another warm weather school at least twice
  forall(t in Years) do
    forall(i in warm_weather) do
      sum(j in team_names | i<>j) (X(j,i,1,t) + X(j,i,2,t) +X(j,i,3,t) + X(j,i,4,t)) + sum(j in warm_weather | i<>j)(X(i,j,1,t) + X(i,j,2,t) + X(i,j,3,t)+ X(i,j,4,t)) >=2
    end-do
  end-do

!   ! =========================================================================================
  !(18) No two far away games in a consequitve  weekend

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_ASC)( X("ASC", j, k,t) + X("ASC", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_CSC)( X("CSC", j, k,t) + X("CSC", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_CSM)( X("CSM", j, k,t) + X("CSM", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_CSUP)( X("CSUP", j, k,t) + X("CSUP", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_FLC)( X("FLC", j, k,t) + X("FLC", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_MSC)( X("MSC", j, k,t) + X("MSC", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_MSCD)( X("MSCD", j, k,t) + X("MSCD", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_NMHU)( X("NMHU", j, k,t) + X("NMHU", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_RU)( X("RU", j, k,t) + X("RU", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_UCCS)( X("UCCS", j, k,t) + X("UCCS", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_CCU)( X("CCU", j, k,t) + X("CCU", j, k+1,t)) <= 1
    end-do
  end-do

  forall(t in Years) do
    forall(k in 1..10) do
      sum(j in F_BHSU)( X("BHSU", j, k,t) + X("BHSU", j, k+1,t)) <= 1
    end-do
  end-do


!   ! =========================================================================================



!   ! -- Teams should play home AT LEAST once in 3 consecutive weeks ------

!   ! (21) Teams play home at least once in 3 weeks in the slots outside
  forall(t in Years) do
    forall(k in 1..9) do
      forall(i in team_names) do
        sum(j in team_names | i<>j)(X(j,i,k,t) + X(j,i,k+1,t) + X(j,i,k+2,t))  >= 1
      end-do
    end-do
  end-do


!   ! =========== Extensions ========================

  declarations
    ! Budget declarations
    Budget: array(team_names) of real
    Travel_Cost_Matrix: array(team_names,team_names) of real
  end-declarations

  if(running_extensions)then
    writeln("Running Extensions")

    initialisations from extension_path
      Travel_Cost_Matrix
      Budget as "Travel_budget_7"
    end-initialisations



    ! - Budget Constraint for away games
    forall(t in Years) do
      forall(i in team_names)do
        sum(k in weekends, j in team_names | i<> j) (X(i,j,k,t) *Travel_Cost_Matrix(j,i)) <= Budget(i)
      end-do
    end-do


  end-if

  ! ======== END EXTENSIONSIONS ==========

  ! ============ Objective Function --------------------------------------

  !(3) Penalize j hosting two home games in a row
  forall(t in Years) do
    forall(k in 1..10) do
      forall(j in team_names) do
        sum(i in team_names | i <> j)(X(i,j,k,t) + X(i,j,k+1,t)) <= a(j,k,t) + 1
      end-do
    end-do
  end-do

  !(4) Penalize j hosting i two years in a row

  forall(t in [1,2,3]) do
    forall(i in team_names) do
      forall(j in team_names | i <> j)
      sum(k in weekends)(X(i,j,k,t) + X(i,j,k,t+1)) <= q(i,j,t) + 1
    end-do
  end-do

  penA:= sum(i in team_names, k in weekends, t in Years) a(i,k,t)
  penQ:= sum(i in team_names, j in team_names, t in Years) q(i,j,t)
  penalties:=  penA + penQ


  !set parameters such that out model

  setparam("XPRS_MAXTIME",cutoff)
  setparam("XPRS_VERBOSE", true)

  start_time := gettime
  minimize(penalties)


  !--------- Printing Results ------------------
  if (getprobstat = XPRS_INF) then
    writeln("Problem is infeasible!")
  else
    writeln("Feasible")
    writeln("run time: ", gettime - start_time)
    writeln("Penalties: ", getobjval)
  end-if


  ! prints schedule in the same format as paper
  fopen("solution_v5.txt",F_OUTPUT)

    forall(i in team_names)do
      writeln("")
      writeln("-----  "+i+"   ------")
      writeln(" w |  vs  |  @ ")
      writeln("~~~~~~~~~~~~~~~~")

      forall(t in Years) do
        forall(k in weekends)do
          forall(j in team_names)do
            if(getsol(X(i,j,k,t))=1 )then
              writeln(" ",k,", year ",t," |  ", j, " | away", " Travel Cost: ", Travel_Cost_Matrix(j,i))

            elif(getsol(X(j,i,k,t))=1)then
              writeln(" ",k,", year ",t," | ", j, " | home")

            end-if
          end-do
        end-do
      end-do

      writeln("Total Travel Costs: ",  sum(k in weekends, t in Years, j in team_names | i<> j) getsol((X(i,j,k,t)) *Travel_Cost_Matrix(j,i)))
    end-do


    !============================



  fclose(F_OUTPUT)

  forall(t in Years) do
    forall(i in team_names)do
      forall(k in weekends)do
        if(getsol(a(i,k,t))>0)then
          writeln("team ",i," in week ",k, " ",getsol(a(i,k,t)))
        end-if
      end-do
    end-do
  end-do

writeln("end model")

end-model
